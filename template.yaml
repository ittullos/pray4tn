AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  wpt.bap.tn

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  Pastor4Life:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: app/
      Handler: lambda.handler
      Runtime: ruby2.7
      Architectures:
        - x86_64
      Events:
        Home:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /p4l/home
            Method: get
        Location:
          Type: Api
          Properties:
            Path: /p4l/checkpoint
            Method: post
        Login:
          Type: Api
          Properties:
            Path: /p4l/login
            Method: post
        Signup:
          Type: Api
          Properties:
            Path: /p4l/signup
            Method: post
        PasswordReset:
          Type: Api
          Properties:
            Path: /p4l/password_reset
            Method: post
      VpcConfig:
        SecurityGroupIds:
          - sg-04e38f5ca3081cd9d
        SubnetIds:
          - subnet-09548401ffa6c31f8
          - subnet-0330e233936772fe8

  ReactApp: 
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration: 
        IndexDocument: index.html
      BucketName: wpt.bap.tn.react-app

  LogBucket: 
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: wpt.bap.tn.logs

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref ReactApp
                - /*
      Bucket: !Ref ReactApp

  # Pray4TNapi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     Name: Pray4TNapi
  #     StageName: Prod
  #     DefinitionBody:
  #       swagger: '2.0'
  #       basePath: '/p4l'
  #       paths:
  #         /p4l/{proxy+}:
  #           x-amazon-apigateway-any-method:
  #             responses: {}
  #             x-amazon-apigateway-integration:
  #               uri:
  #                 !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Pastor4Life.Arn}/invocations'
  #               passthroughBehavior: "when_no_match"
  #               httpMethod: POST
  #               type: "aws_proxy"
  #         /p4l/{proxy+}:
  #           x-amazon-apigateway-any-method:
  #             responses: {}
  #             x-amazon-apigateway-integration:
  #               uri:
  #                 !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Pastor4Life.Arn}/invocations'
  #               passthroughBehavior: "when_no_match"
  #               httpMethod: GET
  #               type: "aws_proxy"

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Pray4TN OA'

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "wpt.bap.tn"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        Logging:
          IncludeCookies: 'false'
          Bucket: wpt.bap.tn.logs.s3.amazonaws.com
          Prefix: funnel
        Origins:
        - Id: Pray4TN-react-app
          DomainName: wpt.bap.tn.react-app.s3.us-east-1.amazonaws.com
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        - Id: Pray4TN-API
          # DomainName: !Sub '${Pray4TNapi}.execute-api.${AWS::Region}.amazonaws.com'
          DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
          CustomOriginConfig:
            OriginProtocolPolicy: match-viewer
            HTTPPort: '80'
            HTTPSPort: '443'
        DefaultCacheBehavior:
          TargetOriginId: Pray4TN-react-app
          Compress: 'true'
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy : redirect-to-https
        CacheBehaviors:
        - TargetOriginId: Pray4TN-API
          PathPattern: /p4l/*
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
        - TargetOriginId: Pray4TN-react-app
          PathPattern: /p4lapp
          AllowedMethods:
          - GET
          - HEAD
          ViewerProtocolPolicy: allow-all
          # Name: Managed-UserAgentRefererHeaders
          OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa
          # Name: Managed-CachingOptimized
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api

  # Pray4TNapi:
  #   Description: "API Gateway endpoint URL for Prod stage for Pastor4Life API"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/p4l/"
  Pray4TNPastor4Life:
    Description: "WPT.BAP.TN Lambda Function ARN"
    Value: !GetAtt Pastor4Life.Arn
  Pray4TNFunctionIamRole:
    Description: "Implicit IAM Role created for WPT.BAP.TN function"
    Value: !GetAtt Pastor4LifeRole.Arn
  Pray4TNDistribution:
    Description: "The CloudFront distribution in front of the S3 bucket"
    Value: !Ref CloudfrontDistribution
  # WebsiteUrl:
  #   Description: "The website URL"
  #   Value: !Sub "https://${DomainName}/"
